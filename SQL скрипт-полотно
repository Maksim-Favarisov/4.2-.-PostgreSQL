--1. Создание триггерной функции (функция логирования)
CREATE OR REPLACE FUNCTION log_user_update()
RETURNS TRIGGER AS $$
BEGIN
	IF OLD.name IS DISTINCT FROM NEW.name THEN
	    INSERT INTO users_audit(user_id, field_changed, old_value, new_value, changed_by) -- намеренно не указываем столбец changed_at, чтобы сработало значение по умолчанию
	    VALUES (OLD.id, 'name', OLD.name, NEW.name, 'user'); -- добавляем для name, при помощи триггера получаем данные для вставки нового и старого значений
	END IF;
	IF OLD.email IS DISTINCT FROM NEW.email THEN
		INSERT INTO users_audit (user_id, field_changed, old_value, new_value, changed_by) -- намеренно не указываем столбец changed_at, чтобы сработало значение по умолчанию
	    VALUES (OLD.id, 'email', OLD.email, NEW.email, 'user'); -- добавляем для email, при помощи триггера получаем данные для вставки нового и старого значений
	END IF;
	IF OLD.role IS DISTINCT FROM NEW.role THEN
		INSERT INTO users_audit (user_id, field_changed, old_value, new_value, changed_by) -- намеренно не указываем столбец changed_at, чтобы сработало значение по умолчанию
	    VALUES (OLD.id, 'role', OLD.role, NEW.role, 'user'); -- добавляем для role, при помощи триггера получаем данные для вставки нового и старого значений
	END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--2. Создание триггера
CREATE TRIGGER trigger_log_user_update
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION log_user_update();

--3. Установка расширения pg_cron
CREATE EXTENSION IF NOT EXISTS pg_cron;

--4. Создание функции, которая сохраняет свежие данные в формате .csv
CREATE OR REPLACE FUNCTION export_yesterday_to_csv()
RETURNS TEXT AS $$
DECLARE
    file_path TEXT;
BEGIN
    -- Формируем путь к файлу с датой/временем
    file_path := '/tmp/users_audit_export_' || 
                 to_char(CURRENT_TIMESTAMP, 'YYYYMMDD_HH24MI') || '.csv';
    -- Сохраняем данные за вчера в файл
    EXECUTE format('
        COPY (
            SELECT user_id,
				           field_changed, 
				           old_value, 
				           new_value, 
				           changed_by, 
				           changed_at FROM users_audit 
            WHERE changed_at >= (CURRENT_DATE - 1) 
            AND changed_at < CURRENT_DATE
        ) TO %L WITH CSV HEADER',
        file_path
    );
    RETURN file_path;
END;
$$ LANGUAGE plpgsql;

--5. Создание планировщика pg_cron на 3:00 ночи
SELECT cron.schedule('update_data', '0 3 * * *', $$SELECT export_yesterday_to_csv()$$);
